#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

# Not needed with Oh My Zsh

# update_shell() {
#   local shell_path;
#   shell_path="$(which zsh)"
#
#   fancy_echo "Changing your shell to zsh ..."
#   if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
#     fancy_echo "Adding '$shell_path' to /etc/shells"
#     sudo sh -c "echo $shell_path >> /etc/shells"
#   fi
#   sudo chsh -s "$shell_path" "$USER"
# }

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

# ------------------------------ STARTS HERE -----------------------------------

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# if [ ! -f "$HOME/.zshrc" ]; then
#   touch "$HOME/.zshrc"
# fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."

if [ $1 == 'ruby' ] ; then
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
fi

brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=Brewfile

if [ ! -d "$HOME/.oh-my-zsh" ]; then
  fancy_echo "Installing Oh My Zsh"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
fi

if brew list | grep --silent "qt@5.5"; then
  fancy_echo "Symlink qmake binary to /usr/local/bin for Capybara Webkit..."
  brew unlink qt@5.5
  brew link --force qt@5.5
fi

fancy_echo "Update heroku binary..."
brew unlink heroku
brew link --force heroku

if [ $1 == 'ruby' ] ; then
  fancy_echo "Configuring Ruby ..."

  ruby_version="$(find_latest_ruby)"
  # shellcheck disable=SC2016
  append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
  eval "$(rbenv init -)"

  if ! rbenv versions | grep -Fq "$ruby_version"; then
    RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
  fi

  rbenv global "$ruby_version"
  rbenv shell  "$ruby_version"
  gem update --system
  gem_install_or_update 'bundler'
fi

fancy_echo "Do you wish to alter MacOS Settings?"
select yn in "Yes" "No"; do
  case $yn in
    Yes ) ./MacOSfile; break;;
    No  ) break;;
  esac
done

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  . "$HOME/.laptop.local"
fi
